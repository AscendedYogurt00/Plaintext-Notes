[2020-07-06]

https://www.w3schools.com/sql/default.asp

Most Important SQL Commands:

    SELECT - extracts data from a database
    UPDATE - updates data in a database
    DELETE - deletes data from a database
    INSERT INTO - inserts new data into a database
    CREATE DATABASE - creates a new database
    ALTER DATABASE - modifies a database
    CREATE TABLE - creates a new table
    ALTER TABLE - modifies a table
    DROP TABLE - deletes a table
    CREATE INDEX - creates an index (search key)
    DROP INDEX - deletes an index

SELECT:

    The SELECT statement is used to select data from a database.
    The data returned is stored in a result table, called the result-set.

    SELECT column1, column2, ...
    FROM table_name;

    SELECT * FROM table_name; // Selects all fields in a table. 


SELECT DISTINCT:

    The SELECT DISTINCT statement is used to return only distinct (different) values.

    SELECT DISTINCT column1, column2, ...
    FROM table_name;


WHERE:

    SELECT column1, column2, ...
    FROM table_name
    WHERE condition;

    =	    Equal	
    >	    Greater than	
    <	    Less than	
    >=	    Greater than or equal	
    <=	    Less than or equal	
    <>	    Not equal. Note: In some versions of SQL this operator may be written as !=	
    BETWEEN	Between a certain range	
    LIKE	Search for a pattern	
    IN	    To specify multiple possible values for a column

    SELECT * FROM Customers
    WHERE Country='Mexico';

    SELECT * FROM Customers
    WHERE CustomerID=1;


AND:

    SELECT column1, column2, ...
    FROM table_name
    WHERE condition1 AND condition2 AND condition3 ...;


OR:

    SELECT column1, column2, ...
    FROM table_name
    WHERE condition1 OR condition2 OR condition3 ...;


NOT:

    SELECT column1, column2, ...
    FROM table_name
    WHERE NOT condition;

Examples:

    SELECT * FROM Customers
    WHERE Country='Germany' AND (City='Berlin' OR City='MÃ¼nchen');


ORDER BY:

    SELECT column1, column2, ...
    FROM table_name
    ORDER BY column1, column2, ... ASC|DESC;

    SELECT * FROM Customers
    ORDER BY Country;

    SELECT * FROM Customers
    ORDER BY Country DESC;

    SELECT * FROM Customers
    ORDER BY Country ASC, CustomerName DESC;


INSERT INTO:

    INSERT INTO table_name (column1, column2, column3, ...)
    VALUES (value1, value2, value3, ...);   

    INSERT INTO table_name
    VALUES (value1, value2, value3, ...);

    INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
    VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

    INSERT INTO Customers (CustomerName, City, Country)
    VALUES ('Cardinal', 'Stavanger', 'Norway');


NULL Value:

    It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
    We will have to use the IS NULL and IS NOT NULL operators instead.

    SELECT column_names
    FROM table_name
    WHERE column_name IS NULL;

    SELECT column_names
    FROM table_name
    WHERE column_name IS NOT NULL;

    SELECT CustomerName, ContactName, Address
    FROM Customers
    WHERE Address IS NULL;

SQL UPDATE:

    UPDATE table_name
    SET column1 = value1, column2 = value2, ...
    WHERE condition;

    UPDATE Customers
    SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
    WHERE CustomerID = 1;

    UPDATE Customers
    SET ContactName='Juan'
    WHERE Country='Mexico';

DELETE:

    DELETE FROM table_name WHERE condition;

    DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

    DELETE FROM table_name; // It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact

    DELETE FROM Customers; // The following SQL statement deletes all rows in the "Customers" table, without deleting the table


SELECT TOP Clause:

    The SELECT TOP clause is used to specify the number of records to return.
    The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

    SQL  

        SELECT TOP number|percent column_name(s)
        FROM table_name
        WHERE condition;
        MySQL Syntax:

    MySQL
        SELECT column_name(s)
        FROM table_name
        WHERE condition
        LIMIT number;

    SELECT TOP 3 * FROM Customers;

    SELECT * FROM Customers
    LIMIT 3;

    SELECT * FROM Customers
    WHERE ROWNUM <= 3;

    SELECT TOP 50 PERCENT * FROM Customers;

MIN():

    The MIN() function returns the smallest value of the selected column.

    SELECT MIN(column_name)
    FROM table_name
    WHERE condition;

    SELECT MIN(Price) AS SmallestPrice
    FROM Products;


MAX():

    The MAX() function returns the largest value of the selected column.

    SELECT MAX(column_name)
    FROM table_name
    WHERE condition;

    SELECT MAX(Price) AS LargestPrice
    FROM Products;

COUNT():

    SELECT COUNT(column_name)
    FROM table_name
    WHERE condition;

    SELECT COUNT(ProductID)
    FROM Products;

AVG():

    SELECT AVG(column_name)
    FROM table_name
    WHERE condition;

    SELECT AVG(Price)
    FROM Products;

SUM():

    SELECT SUM(column_name)
    FROM table_name
    WHERE condition;

    SELECT SUM(Quantity)
    FROM OrderDetails;

LIKE:

    The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

    % - The percent sign represents zero, one, or multiple characters
    _ - The underscore represents a single character

    WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
    WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
    WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
    WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
    WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
    WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
    WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"

    SELECT column1, column2, ...
    FROM table_name
    WHERE columnN LIKE pattern;

    SELECT * FROM Customers
    WHERE CustomerName LIKE 'a%';

Wildcard Characters:


    Symbol	Description	                        Example
    %	    Represents zero or more characters	bl% finds bl, black, blue, and blob

    _	    Represents a single character	    h_t finds hot, hat, and hit

    []	    Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit

    ^	R   epresents any character not in the brackets	h[^oa]t finds hit, but not hot and hat

    -	Represents a range of characters	c[a-b]t finds cat and cbt


    SELECT * FROM Customers
    WHERE City LIKE 'ber%';

    SELECT * FROM Customers
    WHERE City LIKE '%es%';

    SELECT * FROM Customers
    WHERE City LIKE '_ondon';


IN:

    The IN operator allows you to specify multiple values in a WHERE clause.
    The IN operator is a shorthand for multiple OR conditions.

    SELECT column_name(s)
    FROM table_name
    WHERE column_name IN (value1, value2, ...);
    
    or 

    SELECT column_name(s)
    FROM table_name
    WHERE column_name IN (SELECT STATEMENT);

    SELECT * FROM Customers
    WHERE Country IN ('Germany', 'France', 'UK');

    SELECT * FROM Customers
    WHERE Country NOT IN ('Germany', 'France', 'UK');

    SELECT * FROM Customers
    WHERE Country IN (SELECT Country FROM Suppliers);


BETWEEN:

    The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
    The BETWEEN operator is inclusive: begin and end values are included. 

    SELECT column_name(s)
    FROM table_name
    WHERE column_name BETWEEN value1 AND value2;

    SELECT * FROM Products
    WHERE Price BETWEEN 10 AND 20;

    SELECT * FROM Products
    WHERE Price NOT BETWEEN 10 AND 20;

    SELECT * FROM Products
    WHERE Price BETWEEN 10 AND 20
    AND CategoryID NOT IN (1,2,3);

    SELECT * FROM Products
    WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
    ORDER BY ProductName;

    SELECT * FROM Orders
    WHERE OrderDate BETWEEN #01/07/1996# AND #31/07/1996#;

    SELECT * FROM Orders
    WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

Aliases:

    SQL aliases are used to give a table, or a column in a table, a temporary name.
    Aliases are often used to make column names more readable.
    An alias only exists for the duration of the query.

    SELECT column_name AS alias_name
    FROM table_name;    

    SELECT column_name(s)
    FROM table_name AS alias_name;

    SELECT CustomerID AS ID, CustomerName AS Customer
    FROM Customers;

    The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):

        SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
        FROM Customers;

JOIN:

    *Look on this link for venn diagrams -* https://www.w3schools.com/sql/sql_join.asp

    A JOIN clause is used to combine rows from two or more tables, based on a related column between them

    (INNER) JOIN: Returns records that have matching values in both tables

    LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table

    RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table

    FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table


    // Orders table
    OrderID	    CustomerID	OrderDate
    10308	    2	        1996-09-18
    10309	    37	        1996-09-19
    10310	    77	        1996-09-20

    // Customer table 
    CustomerID	CustomerName	                        ContactName	        Country
    1	        Alfreds Futterkiste	                    Maria Anders	    Germany
    2	        Ana Trujillo Emparedados y helados	    Ana Trujillo	    Mexico
    3	        Antonio Moreno TaquerÃ­a	                Antonio Moreno	    Mexico
    
        SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
        FROM Orders
        INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

    // After the command is run 

    OrderID	    CustomerName	                    OrderDate
    10308	    Ana Trujillo Emparedados y helados	9/18/1996
    10365	    Antonio Moreno TaquerÃ­a	            11/27/1996
    10383	    Around the Horn	                    12/16/1996
    10355	    Around the Horn	                    11/15/1996
    10278	    Berglunds snabbkÃ¶p	                8/12/1996

    // Inner join
    SELECT column_name(s)
    FROM table1
    INNER JOIN table2
    ON table1.column_name = table2.column_name;

    // Left join 
    SELECT column_name(s)
    FROM table1
    LEFT JOIN table2
    ON table1.column_name = table2.column_name;

    SELECT Customers.CustomerName, Orders.OrderID
    FROM Customers
    LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
    ORDER BY Customers.CustomerName;

    // Right join
    SELECT column_name(s)
    FROM table1
    RIGHT JOIN table2
    ON table1.column_name = table2.column_name;

    SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
    FROM Orders
    RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
    ORDER BY Orders.OrderID;

    // Full join
    SELECT column_name(s)
    FROM table1
    FULL OUTER JOIN table2
    ON table1.column_name = table2.column_name
    WHERE condition;

    SELECT Customers.CustomerName, Orders.OrderID
    FROM Customers
    FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
    ORDER BY Customers.CustomerName;

    // Self join 
    SELECT column_name(s)
    FROM table1 T1, table1 T2
    WHERE condition;

    SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
    FROM Customers A, Customers B
    WHERE A.CustomerID <> B.CustomerID
    AND A.City = B.City
    ORDER BY A.City;

Union:

    The UNION operator is used to combine the result-set of two or more SELECT statements.

        SELECT column_name(s) FROM table1
        UNION
        SELECT column_name(s) FROM table2;

        SELECT City FROM Customers
        UNION
        SELECT City FROM Suppliers
        ORDER BY City;


    The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

        SELECT column_name(s) FROM table1
        UNION ALL
        SELECT column_name(s) FROM table2;


    SELECT City, Country FROM Customers
    WHERE Country='Germany'
    UNION
    SELECT City, Country FROM Suppliers
    WHERE Country='Germany'
    ORDER BY City;


GROUP BY:

    The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".

    The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.


    SELECT column_name(s)
    FROM table_name
    WHERE condition
    GROUP BY column_name(s)
    ORDER BY column_name(s);

    SELECT COUNT(CustomerID), Country
    FROM Customers
    GROUP BY Country
    ORDER BY COUNT(CustomerID) DESC;

    SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
    LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
    GROUP BY ShipperName;


HAVING:

    The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

    SELECT column_name(s)
    FROM table_name
    WHERE condition
    GROUP BY column_name(s)
    HAVING condition
    ORDER BY column_name(s);

    SELECT COUNT(CustomerID), Country
    FROM Customers
    GROUP BY Country
    HAVING COUNT(CustomerID) > 5;


EXISTS:

    The EXISTS operator is used to test for the existence of any record in a subquery.
    The EXISTS operator returns true if the subquery returns one or more records.

    SELECT column_name(s)
    FROM table_name
    WHERE EXISTS
    (SELECT column_name FROM table_name WHERE condition);

    SELECT SupplierName
    FROM Suppliers
    WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);    

ANY:

    The ANY and ALL operators are used with a WHERE or HAVING clause.
    The ANY operator returns true if any of the subquery values meet the condition.

    SELECT column_name(s)
    FROM table_name
    WHERE column_name operator ANY
    (SELECT column_name FROM table_name WHERE condition);

    SELECT ProductName
    FROM Products
    WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);


All:

    The ALL operator returns true if all of the subquery values meet the condition.

    SELECT column_name(s)
    FROM table_name
    WHERE column_name operator ALL
    (SELECT column_name FROM table_name WHERE condition);

    SELECT ProductName
    FROM Products
    WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);


SELECT INTO:

    Copy all columns into a new table:

        SELECT *
        INTO newtable [IN externaldb]
        FROM oldtable
        WHERE condition;

    Copy only some columns into a new table:

        SELECT column1, column2, column3, ...
        INTO newtable [IN externaldb]
        FROM oldtable
        WHERE condition;

    // Creates backup of customers 
    SELECT * INTO CustomersBackup2017
    FROM Customers;

INSERT INTO:

    The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
    INSERT INTO SELECT requires that data types in source and target tables match
    The existing records in the target table are unaffected

    // Copy all columns from one table to another table:
    INSERT INTO table2
    SELECT * FROM table1
    WHERE condition;

    // Copy only some columns from one table into another table:
    INSERT INTO table2 (column1, column2, column3, ...)
    SELECT column1, column2, column3, ...
    FROM table1
    WHERE condition;

    INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
    SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;

CASE:

    The CASE statement goes through conditions and returns a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
    If there is no ELSE part and no conditions are true, it returns NULL.

    CASE
        WHEN condition1 THEN result1
        WHEN condition2 THEN result2
        WHEN conditionN THEN resultN
        ELSE result
    END;

    // OrderDetails table
    OrderDetailID	OrderID	    ProductID	Quantity
    1	            10248	    11	        12
    2	            10248	    42	        10
    3	            10248	    72	        5
    4	            10249	    14	        9
    5	            10249	    51	        40

        SELECT OrderID, Quantity,
        CASE
            WHEN Quantity > 30 THEN 'The quantity is greater than 30'
            WHEN Quantity = 30 THEN 'The quantity is 30'
            ELSE 'The quantity is under 30'
        END AS QuantityText
        FROM OrderDetails;

NULL Functions:

        
    P_Id	ProductName	    UnitPrice	UnitsInStock	UnitsOnOrder
    1	    Jarlsberg	    10.45	    16	            15
    2	    Mascarpone	    32.56	    23	             
    3	    Gorgonzola	    15.67	    9	            20

    The MySQL IFNULL() function lets you return an alternative value if an expression is NULL:

            SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))
            FROM Products;

        or we can use the COALESCE() function, like this:

            SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))
            FROM Products;

    SQL Server

        The SQL Server ISNULL() function lets you return an alternative value when an expression is NULL:

        SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0))
        FROM Products;


Stored Procedure:

    A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

    So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.

    You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.

    // Storing
    CREATE PROCEDURE procedure_name
    AS
    sql_statement
    GO;
    // Executing
    EXEC procedure_name;


    CREATE PROCEDURE SelectAllCustomers
    AS
    SELECT * FROM Customers
    GO;

    EXEC SelectAllCustomers;


Comments:

    Single line comments start with --.
    Any text between -- and the end of the line will be ignored (will not be executed).

        --Select all:
        SELECT * FROM Customers;


    Multi-line comments start with /* and end with */.

    Any text between /* and */ will be ignored.

    The following example uses a multi-line comment as an explanation:

        /*SELECT * FROM Customers;
        SELECT * FROM Products;
        SELECT * FROM Orders;
        SELECT * FROM Categories;*/
        SELECT * FROM Suppliers;